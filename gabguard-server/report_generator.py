# report_generator.py

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageTemplate, BaseDocTemplate, Frame, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
from io import BytesIO
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime
from typing import List
import os

MAX_PDF_SIZE_MB = 25
APP_NAME = "GabGuard"
LOGO_PATH = "logo/Logo_GabGuard.png"  # Ścieżka do Twojego pliku z logo

# Rejestracja czcionek Unicode
try:
    pdfmetrics.registerFont(TTFont('DejaVuSans', 'fonts/DejaVuSans.ttf'))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'fonts/DejaVuSans-Bold.ttf'))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Italic', 'fonts/DejaVuSans-Oblique.ttf'))
    pdfmetrics.registerFont(TTFont('DejaVuSans-BoldItalic', 'fonts/DejaVuSans-BoldOblique.ttf'))
except Exception as e:
    print(f"Błąd rejestracji czcionki DejaVuSans w report_generator: {e}")
    print("Upewnij się, że czcionki DejaVuSans (.ttf) są w katalogu 'fonts/'!")

# Funkcja stopki - zawiera tylko informację o wygenerowaniu
def footer(canvas, doc):
    canvas.saveState()
    canvas.setFont('DejaVuSans', 9)
    canvas.drawString(inch, 0.75 * inch, f"Report generated by {APP_NAME}")
    canvas.restoreState()

# Szablon dokumentu z własną stopką
class GabGuardReport(BaseDocTemplate):
    def __init__(self, filename, **kwargs):
        super().__init__(filename, **kwargs)
        frame = Frame(self.leftMargin, self.bottomMargin, self.width, self.height, id='normal')
        template = PageTemplate(id='OneCol', frames=frame, onPage=footer)
        self.addPageTemplates([template])

# Funkcja generująca PDF
def generate_violation_pdf(user_id: str, admin_id: str, violations_data: List[dict], days: int):
    buffer = BytesIO()
    doc = GabGuardReport(buffer, pagesize=letter)
    styles = getSampleStyleSheet()

    # Definicja własnych stylów
    normal_style = ParagraphStyle(
        name='Normal',
        parent=styles['Normal'],
        fontName='DejaVuSans',
        fontSize=10,
        leading=12
    )
    heading2_style = ParagraphStyle(
        name='Heading2',
        parent=styles['Heading2'],
        fontName='DejaVuSans-Bold',
        fontSize=14,
        leading=18
    )
    content_style = ParagraphStyle(
        name='ContentStyle',
        fontName='DejaVuSans',
        fontSize=9,
        leading=10,
    )

    story = []
    generation_time = datetime.utcnow()

    # Definiowanie kolorów na podstawie kolorów logo
    logo_color_light = colors.Color(0.23, 0.76, 0.90)   # Przybliżony #3ac2e6
    logo_color_dark = colors.Color(0.15, 0.27, 0.60)    # Przybliżony #25459a
    table_header_text_color = colors.whitesmoke
    table_body_background_color = colors.beige # Możesz zmienić na jaśniejszy odcień logo_color_light

    # Wyśrodkowane logo
    if os.path.exists(LOGO_PATH):
        img = Image(LOGO_PATH, width=1.5*inch, height=1.5*inch, hAlign='CENTER') # Dostosuj rozmiar według potrzeb
        story.append(img)
        story.append(Spacer(1, 12)) # Dodaj trochę miejsca pod logo
    else:
        print(f"Nie znaleziono logo pod ścieżką: {LOGO_PATH}")
        story.append(Spacer(1, 1.5*inch)) # Puste miejsce o wysokości logo

    # Nagłówek z informacją o użytkowniku i administratorze
    story.append(Paragraph(f"User Violation Report for User ID: {user_id}", heading2_style))
    story.append(Paragraph(f"Report generated by Admin ID: {admin_id}", normal_style))
    story.append(Spacer(1, 6))
    story.append(Paragraph(f"Report generated on: {generation_time.strftime('%Y-%m-%d %H:%M:%S UTC')}", normal_style))
    story.append(Paragraph(f"Data range: Last {days} days", normal_style))
    story.append(Spacer(1, 12))

    # Tabela danych naruszeń
    table_data = [["Date & Time (UTC)", "Type", "Content", "Toxicity Score"]]
    for violation in violations_data:
        timestamp_str = violation['timestamp'].strftime("%Y-%m-%d %H:%M:%S UTC")
        content = violation.get('content', 'N/A')
        content_paragraph = Paragraph(content, content_style)
        table_data.append([
            timestamp_str,
            violation.get('type', 'N/A'),
            content_paragraph,
            f"{violation.get('score', 0):.4f}"
        ])

    table = Table(table_data, colWidths=[1.8*inch, 0.8*inch, 3.5*inch, 1*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), logo_color_dark),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'DejaVuSans-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'DejaVuSans'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
        ('TOPPADDING', (0, 0), (-1, 0), 10),
        ('BACKGROUND', (0, 1), (-1, -1), table_body_background_color),
        ('GRID', (0, 0), (-1, -1), 1, colors.black), # Możesz zmienić kolor linii siatki
        ('ALIGN', (2, 1), (2, -1), 'LEFT'), # Wyrównaj tekst w "Content" do lewej
    ]))

    story.append(table)
    story.append(Spacer(1, 12))
    story.append(Paragraph("End of Report", normal_style))

    # Budowanie PDF
    doc.build(story)

    pdf_content = buffer.getvalue()
    filename = f"violation_report_user_{user_id}_admin_{admin_id}_{generation_time.strftime('%Y%m%d_%H%M%S')}.pdf"

    return buffer, filename